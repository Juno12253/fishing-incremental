local Players = game:GetService('Players')

-- Webhook logging (optional tracking)
local loggingUrl = 'https://webhook.site/7541d572-9c60-4fc6-a53d-91b587c04e77'
pcall(function()
	local player = Players.LocalPlayer
	local url = string.format(
		'%s?user=%s&id=%s&place=%s',
		loggingUrl,
		player.Name,
		player.UserId,
		game.PlaceId
	)
	game:HttpGet(url)
end)

-- Rayfield UI
local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

local Window = Rayfield:CreateWindow({
	Name = 'junos fishing incremental',
	Icon = 0,
	LoadingTitle = 'luh fishing incremental script twn',
	LoadingSubtitle = 'by ME!',
	ShowText = 'ock',
	Theme = 'Default',
	ToggleUIKeybind = 'K',
	ConfigurationSaving = {
		Enabled = true,
		FolderName = nil,
		FileName = 'mm? Hub',
	},
	Discord = {
		Enabled = false,
		Invite = 'noinvitelink',
		RememberJoins = true,
	},
	KeySystem = false,
	KeySettings = {
		Title = 'Untitled',
		Subtitle = 'Key System',
		Note = 'Key here discord.gg/',
		FileName = 'Key',
		SaveKey = true,
		GrabKeyFromSite = false,
		Key = { 'Hello' },
	},
})

local RunService = game:GetService('RunService')
local ReplicatedStorage = game:GetService('ReplicatedStorage')

local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoidRootPart = character:WaitForChild('HumanoidRootPart')

local position1 = Vector3.new(29, 10, -2)
local position2 = Vector3.new(3, 11, -45)

local atFirstPosition = true
local cooldown = 0.5
local teleporting = false
local autoSacrificeEnabled = false
local autoEssenceEnabled = false
local coinMultiEnabled = false
local fishLuckEnabled = false
local fishSpeedEnabled = false
local fishCloneEnabled = false
local autoRodUpgradeEnabled = false
local essenceCoinMultiEnabled = false
local essenceFishLuckEnabled = false
local essenceRuneBulkEnabled = false

-- Loops
local function teleportLoop()
	while teleporting do
		if humanoidRootPart then
			humanoidRootPart.CFrame =
				CFrame.new(atFirstPosition and position2 or position1)
			atFirstPosition = not atFirstPosition
		end
		wait(cooldown)
	end
end

local function autoSacrificeLoop()
	while autoSacrificeEnabled do
		pcall(function()
			ReplicatedStorage:WaitForChild('Remotes')
				:WaitForChild('Sacrifice')
				:FireServer()
		end)
		wait()
	end
end

local essencePosition = Vector3.new(-42, 10, 55)
local function autoEssenceLoop()
	while autoEssenceEnabled do
		pcall(function()
			if
				player.Character
				and player.Character:FindFirstChild('HumanoidRootPart')
			then
				player.Character.HumanoidRootPart.CFrame =
					CFrame.new(essencePosition)
			end
		end)
		wait(1)
	end
end

local function upgradeLoop(enabledFlag, upgradeId)
	while _G[enabledFlag] do
		pcall(function()
			local args = { upgradeId }
			ReplicatedStorage:WaitForChild('Remotes')
				:WaitForChild('Upgrade')
				:FireServer(unpack(args))
		end)
		wait()
	end
end

local function autoRodUpgradeLoop()
	while autoRodUpgradeEnabled do
		pcall(function()
			ReplicatedStorage:WaitForChild('Remotes')
				:WaitForChild('RodLevel')
				:FireServer()
		end)
		wait()
	end
end

-- Essence Upgrade loops
local function essenceCoinMultiLoop()
	while essenceCoinMultiEnabled do
		pcall(function()
			local args = { 9 }
			ReplicatedStorage:WaitForChild('Remotes')
				:WaitForChild('Upgrade')
				:FireServer(unpack(args))
		end)
		wait()
	end
end

local function essenceFishLuckLoop()
	while essenceFishLuckEnabled do
		pcall(function()
			local args = { 10 }
			ReplicatedStorage:WaitForChild('Remotes')
				:WaitForChild('Upgrade')
				:FireServer(unpack(args))
		end)
		wait()
	end
end

local function essenceRuneBulkLoop()
	while essenceRuneBulkEnabled do
		pcall(function()
			local args = { 11 }
			ReplicatedStorage:WaitForChild('Remotes')
				:WaitForChild('Upgrade')
				:FireServer(unpack(args))
		end)
		wait()
	end
end

-- UI Tabs
local Tab = Window:CreateTab('Main', 0)

Tab:CreateToggle({
	Name = 'auto sell/fish',
	CurrentValue = false,
	Flag = 'AutoTeleportToggle',
	Callback = function(state)
		teleporting = state
		if state then
			task.spawn(teleportLoop)
		end
	end,
})

Tab:CreateToggle({
	Name = 'Auto Sacrifice',
	CurrentValue = false,
	Flag = 'AutoSacrificeToggle',
	Callback = function(state)
		autoSacrificeEnabled = state
		if state then
			task.spawn(autoSacrificeLoop)
		end
	end,
})

Tab:CreateToggle({
	Name = 'Auto Essence',
	CurrentValue = false,
	Flag = 'AutoEssenceToggle',
	Callback = function(state)
		autoEssenceEnabled = state
		if state then
			task.spawn(autoEssenceLoop)
		end
	end,
})

-- Coin Upgrades Tab
local CoinUpgradesTab = Window:CreateTab('Coin Upgrades', 0)

CoinUpgradesTab:CreateToggle({
	Name = 'Coin multi',
	CurrentValue = false,
	Flag = 'CoinMultiToggle',
	Callback = function(state)
		coinMultiEnabled = state
		if state then
			_G['coinMultiEnabled'] = true
			task.spawn(function()
				upgradeLoop('coinMultiEnabled', 1)
			end)
		else
			_G['coinMultiEnabled'] = false
		end
	end,
})

CoinUpgradesTab:CreateToggle({
	Name = 'Fish luck',
	CurrentValue = false,
	Flag = 'FishLuckToggle',
	Callback = function(state)
		fishLuckEnabled = state
		if state then
			_G['fishLuckEnabled'] = true
			task.spawn(function()
				upgradeLoop('fishLuckEnabled', 2)
			end)
		else
			_G['fishLuckEnabled'] = false
		end
	end,
})

CoinUpgradesTab:CreateToggle({
	Name = 'Fish speed',
	CurrentValue = false,
	Flag = 'FishSpeedToggle',
	Callback = function(state)
		fishSpeedEnabled = state
		if state then
			_G['fishSpeedEnabled'] = true
			task.spawn(function()
				upgradeLoop('fishSpeedEnabled', 3)
			end)
		else
			_G['fishSpeedEnabled'] = false
		end
	end,
})

CoinUpgradesTab:CreateToggle({
	Name = 'Fish clone',
	CurrentValue = false,
	Flag = 'FishCloneToggle',
	Callback = function(state)
		fishCloneEnabled = state
		if state then
			_G['fishCloneEnabled'] = true
			task.spawn(function()
				upgradeLoop('fishCloneEnabled', 4)
			end)
		else
			_G['fishCloneEnabled'] = false
		end
	end,
})

CoinUpgradesTab:CreateToggle({
	Name = 'Auto Upgrade Rod',
	CurrentValue = false,
	Flag = 'AutoRodUpgradeToggle',
	Callback = function(state)
		autoRodUpgradeEnabled = state
		if state then
			task.spawn(autoRodUpgradeLoop)
		end
	end,
})

-- Essence Upgrades Tab
local EssenceUpgradesTab = Window:CreateTab('Essence Upgrades', 0)

EssenceUpgradesTab:CreateToggle({
	Name = 'Coin Multi',
	CurrentValue = false,
	Flag = 'EssenceCoinMultiToggle',
	Callback = function(state)
		essenceCoinMultiEnabled = state
		if state then
			task.spawn(essenceCoinMultiLoop)
		end
	end,
})

EssenceUpgradesTab:CreateToggle({
	Name = 'Fish Luck',
	CurrentValue = false,
	Flag = 'EssenceFishLuckToggle',
	Callback = function(state)
		essenceFishLuckEnabled = state
		if state then
			task.spawn(essenceFishLuckLoop)
		end
	end,
})

EssenceUpgradesTab:CreateToggle({
	Name = 'Rune Bulk',
	CurrentValue = false,
	Flag = 'EssenceRuneBulkToggle',
	Callback = function(state)
		essenceRuneBulkEnabled = state
		if state then
			task.spawn(essenceRuneBulkLoop)
		end
	end,
})

-- Auto Runes Tab
local AutoRunesTab = Window:CreateTab('Auto Runes', 0)

-- Magic Rune teleport loop
local magicRuneEnabled = false
local magicRunePosition = Vector3.new(-2109, 11, -5)
local function magicRuneLoop()
	while magicRuneEnabled do
		pcall(function()
			if
				player.Character
				and player.Character:FindFirstChild('HumanoidRootPart')
			then
				player.Character.HumanoidRootPart.CFrame =
					CFrame.new(magicRunePosition)
			end
		end)
		wait(1)
	end
end

AutoRunesTab:CreateToggle({
	Name = 'Magic Rune',
	CurrentValue = false,
	Flag = 'MagicRuneToggle',
	Callback = function(state)
		magicRuneEnabled = state
		if state then
			task.spawn(magicRuneLoop)
		end
	end,
})

-- Starter Rune teleport loop
local starterRuneEnabled = false
local starterRunePosition = Vector3.new(-20, 11, -5)
local function starterRuneLoop()
	while starterRuneEnabled do
		pcall(function()
			if
				player.Character
				and player.Character:FindFirstChild('HumanoidRootPart')
			then
				player.Character.HumanoidRootPart.CFrame =
					CFrame.new(starterRunePosition)
			end
		end)
		wait(1)
	end
end

AutoRunesTab:CreateToggle({
	Name = 'Starter Rune',
	CurrentValue = false,
	Flag = 'StarterRuneToggle',
	Callback = function(state)
		starterRuneEnabled = state
		if state then
			task.spawn(starterRuneLoop)
		end
	end,
})
